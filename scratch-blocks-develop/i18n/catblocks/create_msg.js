#!/usr/bin/env node

/**
 * @author Andreas Karner <andreas.karner@student.tugraz.at>
 * @description generate crowdin message file based on msg/*.json files, please run first create_msg_json.js if needed
 *  
 * @changelog 2019-08-14: initial version
 *            2019-08-23: added some more comments, refactor code
 */

const fs = require('fs');
const path = require('path');

// please define config here
const MSG_DIR = path.join('msg');
const JSON_DIR = path.join(MSG_DIR, 'json');
const JS_DIR = path.join(MSG_DIR, 'js');
const MESSAGE_FILE = path.join(MSG_DIR, 'catblocks_msgs.js');

const JS_HEADER = `// This file was automatically generated by ${path.basename(__filename)}
// Please do not modify.

'use strict';

`;
const MESSAGE_HEADER = `// This file was automatically generated by ${path.basename(__filename)}
// Please do not modify.

'use strict';

goog.provide('Blockly.ScratchMsgs.allLocales');
goog.require('Blockly.ScratchMsgs');

`;

// create dir if not exists
if (!fs.existsSync(JS_DIR)) {
  fs.mkdirSync(JS_DIR);
}

// generate main catblocks_msgs.js file
const message_fd = fs.openSync(MESSAGE_FILE, 'w');
fs.writeSync(message_fd, MESSAGE_HEADER);

// generate for each msg/*.json file a msg/*.js file
const langfiles = fs.readdirSync(JSON_DIR, { encoding: 'utf-8' });
langfiles.forEach(langfile => {
  if (langfile.match(/.+\.json$/)) {
    const lang_name = langfile.substr(0, langfile.indexOf('.'))
    const json_path = path.join(JSON_DIR, langfile);
    const json_object = JSON.parse(fs.readFileSync(json_path, { encoding: 'utf-8' }));

    const js_path = path.join(JS_DIR, `${lang_name}.js`);
    const js_fd = fs.openSync(js_path, 'w');
    fs.writeSync(js_fd, JS_HEADER);
    fs.writeSync(js_fd, `export default {\n`);

    Object.keys(json_object).forEach(key => {
      fs.writeSync(js_fd, `  "${key}": "${json_object[key]}",\n`);
    });
    fs.writeSync(js_fd, `};`);
    fs.closeSync(js_fd);

    // link it to the global catblocks message file
    fs.writeSync(message_fd, `import ${lang_name} from './js/${lang_name}.js'\n`);
    fs.writeSync(message_fd, `Blockly.ScratchMsgs.locales["${lang_name}"] = ${lang_name};\n`);
  }
});

fs.closeSync(message_fd);